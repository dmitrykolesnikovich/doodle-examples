"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[858],{9019:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return r},contentTitle:function(){return d},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var i=t(7462),o=t(3366),a=(t(7294),t(3905)),l=t(3138),s=["components"],r={title:"Todo",hide_title:!0},d="[Todo](https://github.com/nacular/doodle-tutorials/tree/master/Todo) Tutorial",p={unversionedId:"todo",id:"todo",title:"Todo",description:"This tutorial shows how you might build the TodoMVC app using Doodle. This version deviates from the",source:"@site/docs/todo.mdx",sourceDirName:".",slug:"/todo",permalink:"/doodle-tutorials/docs/todo",tags:[],version:"current",frontMatter:{title:"Todo",hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Calculator",permalink:"/doodle-tutorials/docs/calculator"},next:{title:"Photos",permalink:"/doodle-tutorials/docs/photos"}},c=[{value:"Project Setup",id:"project-setup",children:[],level:2},{value:"Defining Our Application",id:"defining-our-application",children:[],level:2},{value:"Creating A Fullscreen App",id:"creating-a-fullscreen-app",children:[],level:2},{value:"Supporting Docs Embedding",id:"supporting-docs-embedding",children:[],level:2}],m={toc:c};function u(e){var n=e.components,t=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,i.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"todo-tutorial"},(0,a.kt)("a",{parentName:"h1",href:"https://github.com/nacular/doodle-tutorials/tree/master/Todo"},"Todo")," Tutorial"),(0,a.kt)("p",null,"This tutorial shows how you might build the ",(0,a.kt)("a",{parentName:"p",href:"http://todomvc.com"},"TodoMVC")," app using Doodle. This version deviates from the\nofficial app spec in that (like all Doodle apps) it does not use CSS or HTML directly. Therefore, it\ndoes not include the assets provided by the official spec. Instead, it replicates the UX with Doodle\nprimitives."),(0,a.kt)("p",null,"This version is also designed to work well as an embedded app. The version below (unlike\nthe full-screen version) does not use routing for the filters. This means there is no way to deep-link\nto a filter, like the full-screen version has. The launch code decides this by injecting a different\nstrategy for creating the filter buttons, while the app itself is unaware of this difference."),(0,a.kt)(l.B,{functionName:"todo",height:"700",mdxType:"DoodleCodeBlock"}),"```",(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"You can also see the full-screen app ",(0,a.kt)("a",{parentName:"p",href:"https://nacular.github.io/doodle-tutorials/todo"},"here"),"."))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"project-setup"},"Project Setup"),(0,a.kt)("p",null,"We will use a multi-platform setup for this app. This is not necessary to use Doodle, but it lets us implement our code almost\nentirely in ",(0,a.kt)("inlineCode",{parentName:"p"},"commonMain")," and our tests in ",(0,a.kt)("inlineCode",{parentName:"p"},"commonTest"),". We will then be able to run these tests on the JVM target, which will\nmake their execution really fast and completely decoupled from the JS environment."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle-tutorials/blob/master/Todo/build.gradle.kts"},(0,a.kt)("strong",{parentName:"a"},"build.gradle.kts"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'plugins {\n    kotlin("multiplatform")\n}\n\nkotlin {\n    // Defined in buildSrc/src/main/kotlin/Common.kt\n    jsTargets ()\n    jvmTargets()\n\n    // Defined in gradle.properties\n    val mockkVersion        : String by project\n    val doodleVersion       : String by project\n    val mockkJsVersion      : String by project\n    val coroutinesVersion   : String by project\n    val serializationVersion: String by project\n\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                implementation(kotlin("stdlib-common"))\n                implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutinesVersion") // async font, image loading\n                implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:$serializationVersion" ) // task persistence\n\n                api ("io.nacular.doodle:core:$doodleVersion"    ) // required for Doodle\n                api ("io.nacular.doodle:browser:$doodleVersion" ) // required for Doodle in the browser\n                api ("io.nacular.doodle:controls:$doodleVersion") // provides things like buttons and panels\n            }\n        }\n\n       // ...\n    }\n}\n')),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"defining-our-application"},"Defining Our Application"),(0,a.kt)("p",null,"All Doodle apps must implement the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/application/Application.kt#L4"},(0,a.kt)("inlineCode",{parentName:"a"},"Application")),"\ninterface. The framework will then initialize our app via the constructor."),(0,a.kt)("p",null,"Doodle apps can be defined in ",(0,a.kt)("inlineCode",{parentName:"p"},"commonMain"),", since they do not require any platform-specific dependencies. Therefore, we will do\nthe same and place ours in ",(0,a.kt)("inlineCode",{parentName:"p"},"commonMain/kotlin/io/nacular/doodle/examples"),"."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle-tutorials/blob/master/Todo/src/commonMain/kotlin/io/nacular/doodle/examples/TodoApp.kt#L11"},(0,a.kt)("strong",{parentName:"a"},"TodoApp.kt"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'class TodoApp(display: Display, /*...*/): Application {\n    init {\n        // Launch coroutine to fetch fonts/images\n        GlobalScope.launch {\n            val titleFont  = fonts            { family = "Helvetica Neue"; size = 100; weight = 100 }\n            val listFont   = fonts(titleFont) {                            size =  24               }\n            val footerFont = fonts(titleFont) {                            size =  10               }\n\n            // install theme\n            themes.selected = theme\n\n            display += TodoView(/*...*/)\n\n            display.layout = constrain(display.children[0]) { fill(it) }\n\n            display.fill(config.appBackground.paint)\n        }\n    }\n\n    override fun shutdown() { /* no-op */ }\n}\n')),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Notice that ",(0,a.kt)("inlineCode",{parentName:"p"},"shutdown")," is a no-op, since we don't have any cleanup to do when the app closes."))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"creating-a-fullscreen-app"},"Creating A Fullscreen App"),(0,a.kt)("p",null,"Doodle apps can be ",(0,a.kt)("a",{parentName:"p",href:"https://nacular.github.io/doodle/docs/applications"},"launched")," in a few different ways.\nWe create a helper to launch the app in ",(0,a.kt)("a",{parentName:"p",href:"https://nacular.github.io/doodle/docs/applications#top-level-apps"},"full screen"),"."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle-tutorials/blob/master/Todo/src/jsMain/kotlin/io/nacular/doodle/examples/FullScreen.kt#L12"},(0,a.kt)("strong",{parentName:"a"},"FullScreen.kt"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'package io.nacular.doodle.examples\n\n//...\n\nfun fullScreen() {\n    application(modules = listOf(FontModule, PointerModule, KeyboardModule, basicLabelBehavior(),\n        nativeTextFieldBehavior(), nativeHyperLinkBehavior(), nativeScrollPanelBehavior(smoothScrolling = true),\n        Module(name = "AppModule") {\n            bind<ImageLoader>         () with singleton { ImageLoaderImpl         (instance(), instance()            ) }\n            bind<PersistentStore>     () with singleton { LocalStorePersistence   (                                  ) }\n            bind<NativeLinkStyler>    () with singleton { NativeLinkStylerImpl    (instance()                        ) }\n            bind<DataStore>           () with singleton { DataStore               (instance()                        ) }\n            bind<Router>              () with singleton { TrivialRouter           (window                            ) }\n            bind<FilterButtonProvider>() with singleton { LinkFilterButtonProvider(instance(), instance(), instance()) }\n        }\n    )) {\n        // load app\n        TodoApp(instance(), instance(), instance(), instance(), instance(), instance(), instance(), instance(), instance(), instance())\n    }\n}\n')),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Normally this would just be your ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," function. But ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," would prevent the app from being used as a library. Which\nis what happens to allow both an embedded (in the docs) and full-screen version."))),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"application")," function to launch top-level apps. It takes a list of modules, and a lambda that builds the\napp. This lambda is within a Kodein injection context, which means we can inject dependencies into our app via\n",(0,a.kt)("inlineCode",{parentName:"p"},"instance"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"provider"),", etc."),(0,a.kt)("p",null,"Notice that we have included several modules for our app. This includes one for fonts, pointer, keyboard, and several for various\nView ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/core/Behavior.kt#L7"},(0,a.kt)("inlineCode",{parentName:"a"},"Behaviors")),"\n(i.e. ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Browser/src/jsMain/kotlin/io/nacular/doodle/theme/native/NativeTheme.kt#L108"},(0,a.kt)("inlineCode",{parentName:"a"},"nativeTextFieldBehavior()")),")\nwhich loads the native behavior for TextFields. We also define some bindings\ndirectly in a new module. These are items with no built-in module, or items that only exist in our app code."),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Check out Kodein to learn more about how it handles dependency injection."))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"application")," function also takes an optional HTML element within which the app will be hosted. The app will be hosted in\n",(0,a.kt)("inlineCode",{parentName:"p"},"document.body")," if you do not specify an element."),(0,a.kt)("p",null,"App launching is the only part of our code that is platform-specific; since it is the only time we might care\nabout an HTML element. It also helps support embedding apps into non-Doodle contexts."),(0,a.kt)("h2",{id:"supporting-docs-embedding"},"Supporting Docs Embedding"),(0,a.kt)("p",null,"These docs actually launch the app using a custom ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," with a slightly different set of inputs. The big difference is in\n",(0,a.kt)("inlineCode",{parentName:"p"},"FilterButtonProvider")," used. The docs inject a provider that creates ",(0,a.kt)("inlineCode",{parentName:"p"},"PushButton"),"s instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"HyperLink"),"s for the filter\ncontrols. The app itself treats these the same. The end result is that the docs version does not use routing."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'// Notice the element is provided for embedded version\napplication(root = element, modules = listOf(FontModule, PointerModule, KeyboardModule, basicLabelBehavior(),\n        nativeTextFieldBehavior(), nativeHyperLinkBehavior(), nativeScrollPanelBehavior(smoothScrolling = true),\n        Module(name = "AppModule") {\n            // ...\n\n            // Different behavior for docs version\n            bind<FilterButtonProvider>() with singleton { EmbeddedFilterButtonProvider(instance()) }\n        }\n)) {\n    // load app just like full-screen\n    TodoApp(instance(), instance(), instance(), instance(), instance(), instance(), instance(), instance(), instance(), instance())\n}\n')))}u.isMDXComponent=!0}}]);